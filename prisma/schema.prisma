// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("DATABASE_URL")
}


// model Test {
//   id Int @id @default(autoincrement())
//   name String @db.VarChar(255)
//   desc String?
//   number Int
//   isPublished Boolean
// }

model User {
  id String @id
  username String @unique
  avatar String?
  cover String?
  name String?
  surname String?
  description String?
  city String?
  school String?
  work String?
  website String?
  createdAt DateTime @default(now())
  posts Post[]
  comments Comment[]
  likes Like[]
}

model Post {
  id Int @id @default(autoincrement())
  desc String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  comments Comment[]
  likes Like[]
}

model Comment {
  id Int @id @default(autoincrement())
  desc String
  createAt DateTime @default(now())
  updateAt DateTime @updatedAt
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  likes Like[]
}

model Like {
  id Int @id @default(autoincrement())
  createdAt DateTime @default(now())
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  postId Int
  Comment Comment? @relation(fields: [commentId], references: [id], onDelete: Cascade)
  commentId Int?
}

model Follower {
  id Int @id @default(autoincrement())
  createAt DateTime @default(now())
  follower User @relation(fields: [followerId], references: [id], onDelete: Cascade)
  followerId String
  following User @relation(fields: [followingId], eferences: [id], onDelete: Cascade);
}
